{"version":3,"sources":["App.js","index.js"],"names":["App","useState","langOptions","setLangOptions","fromLang","setFromLang","toLang","setToLang","langInput","setLangInput","langOutput","setLangOutput","errorMsg","setErrorMsg","useEffect","axios","get","headers","then","res","console","log","data","className","onChange","e","target","value","map","val","code","name","cols","rows","onInput","onClick","params","URLSearchParams","append","post","translatedText","translatButtonClicked","ReactDOM","render","document","getElementById"],"mappings":"uNA6GeA,MAzGf,WAEE,MAAuCC,mBAAS,IAAhD,mBAAQC,EAAR,KAAqBC,EAArB,KACA,EAAiCF,mBAAS,MAA1C,mBAAQG,EAAR,KAAkBC,EAAlB,KACA,EAA6BJ,mBAAS,MAAtC,mBAAQK,EAAR,KAAgBC,EAAhB,KACA,EAAmCN,mBAAS,IAA5C,mBAAQO,EAAR,KAAmBC,EAAnB,KACA,EAAqCR,mBAAS,IAA9C,mBAAQS,EAAR,KAAoBC,EAApB,KAEA,EAAiCV,mBAAS,IAA1C,mBAAQW,EAAR,KAAkBC,EAAlB,KA6CA,OAzCAC,qBAAU,WACRC,IAAMC,IAAI,sCACV,CAACC,QAAS,CAAC,OAAU,sBAAsBC,MAAK,SAAAC,GAC9CC,QAAQC,IAAIF,EAAIG,MAChBnB,EAAegB,EAAIG,WAErB,IAoCA,gCACE,qBAAKC,UAAU,gBAAf,6BAEA,gCACE,sBAAKA,UAAU,uBAAf,4BAEE,uBAAMA,UAAU,uBAAhB,cACInB,EADJ,OAIA,wBAAQoB,SAAU,SAAAC,GAAC,OAAEpB,EAAYoB,EAAEC,OAAOC,QAAQJ,UAAU,kBAA5D,SACCrB,EAAY0B,KAAI,SAAAC,GAAG,OAAG,wBAAuBF,MAAOE,EAAIC,KAAlC,SAAyCD,EAAIE,MAAhCF,EAAIC,cAI1C,sBAAKP,UAAU,uBAAf,0BAEE,uBAAMA,UAAU,uBAAhB,cACIjB,EADJ,OAIA,wBAAQkB,SAAU,SAAAC,GAAC,OAAElB,EAAUkB,EAAEC,OAAOC,QAAQJ,UAAU,kBAA1D,SACCrB,EAAY0B,KAAI,SAAAC,GAAG,OAAG,wBAAuBF,MAAOE,EAAIC,KAAlC,SAAyCD,EAAIE,MAAhCF,EAAIC,iBAO5C,8BACE,0BAAUP,UAAU,iBAAiBS,KAAK,KAAKC,KAAK,IAAIC,QArCxC,SAACT,GACnBhB,EAAagB,EAAEC,OAAOC,OACtBd,EAAY,SAuCZ,8BACE,0BAAUU,UAAU,iBAAiBS,KAAK,KAAKC,KAAK,IAAIN,MAAOjB,MAGjE,8BACE,wBAAQa,UAAU,eAAeY,QAAS,SAACV,GAAD,OAvEjB,WAE7B,GAAe,KAAZjB,EACDK,EAAY,8BACZF,EAAc,QAEZ,CAEJ,IAAMyB,EAAS,IAAIC,gBACnBD,EAAOE,OAAO,IAAK9B,GACnB4B,EAAOE,OAAO,SAAUlC,GACxBgC,EAAOE,OAAO,SAAUhC,GACxB8B,EAAOE,OAAO,UAAW,wCAEzBvB,IAAMwB,KAAK,sCACXH,EACA,CAACnB,QAAS,CAAC,OAAU,mBACrB,eAAgB,uCAAuCC,MAAK,SAAAC,GAC1DR,EAAcQ,EAAIG,KAAKkB,gBACvB3B,EAAY,QAoDsC4B,IAAhD,yBAKF,qBAAKlB,UAAU,kBAAf,SACGX,QClGT8B,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.d6f88682.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from \"axios\"\n\n\nfunction App() {\n\n  const [ langOptions, setLangOptions] = useState([])\n  const [ fromLang, setFromLang] = useState(\"en\")\n  const [ toLang, setToLang] = useState(\"en\")\n  const [ langInput, setLangInput] = useState(\"\")\n  const [ langOutput, setLangOutput] = useState(\"\")\n\n  const [ errorMsg, setErrorMsg] = useState(\"\")\n\n  \n\n  useEffect(() =>{\n    axios.get(\"https://libretranslate.de/languages\",\n    {headers: {\"accept\": \"application/json\"}}).then(res => {\n      console.log(res.data)\n      setLangOptions(res.data)\n    })\n  },[])\n\n\n\n   const translatButtonClicked = () => {\n\n    if(langInput===\"\") {\n      setErrorMsg(\"Text should not be empty !\")\n      setLangOutput(\"\")\n    }\n    else{\n\n    const params = new URLSearchParams();\n    params.append('q', langInput);\n    params.append('source', fromLang);\n    params.append('target', toLang);\n    params.append('api_key', \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n\n    axios.post(\"https://libretranslate.de/translate\",\n    params,\n    {headers: {\"accept\": \"application/json\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"}}).then(res => {\n      setLangOutput(res.data.translatedText)\n      setErrorMsg(\"\")\n    })\n    }\n   }\n\n\n   const InputChanged = (e) => {\n      setLangInput(e.target.value)\n      setErrorMsg(\"\")\n   }\n\n\n  return (\n    <div>\n      <div className=\"heading-style\">Text Translator</div>\n\n      <div>\n        <div className=\"selection-text-style\">\n          From Language : \n          <span className=\"selection-span-style\">\n            ({fromLang})\n          </span>\n\n          <select onChange={e=>setFromLang(e.target.value)} className=\"selection-style\">\n          {langOptions.map(val =><option key={val.code} value={val.code}>{val.name}</option>)}\n          </select>\n        </div>\n\n        <div className=\"selection-text-style\">\n          To Language : \n          <span className=\"selection-span-style\">\n            ({toLang})\n          </span>\n\n          <select onChange={e=>setToLang(e.target.value)} className=\"selection-style\">\n          {langOptions.map(val =><option key={val.code} value={val.code}>{val.name}</option>)}\n          </select>\n        </div>\n      </div>\n\n\n\n      <div>\n        <textarea className=\"textarea-style\" cols=\"70\" rows=\"7\" onInput={InputChanged}></textarea>\n      </div>\n\n\n      <div>\n        <textarea className=\"textarea-style\" cols=\"70\" rows=\"7\" value={langOutput}></textarea>\n      </div>\n\n      <div>\n        <button className=\"button-style\" onClick={(e) =>translatButtonClicked()}>\n          Translate\n        </button>\n      </div>\n\n      <div className=\"error-msg-style\">\n        {errorMsg}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}